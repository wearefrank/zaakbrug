name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - master

jobs:
  version-next:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version-next: ${{ steps.reference.outputs.next-reference }}
      version-next-strict: ${{ steps.reference.outputs.next-reference }}
    steps:
      - uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2

      - name: Next Reference
        id: reference
        uses: wearefrank/ci-cd-templates/next-reference@fcd9bc33af82f29f162307f8c30433b8730b6a01 #1.4.0

  ci:
    uses: wearefrank/ci-cd-templates/.github/workflows/ci-generic.yml@fcd9bc33af82f29f162307f8c30433b8730b6a01 #1.4.0
    needs:
      - version-next
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
    with:
      version: ${{ needs.version-next.outputs.version-next }}
      docker-image-repo: ${{ vars.DOCKER_IMAGE_REPOSITORY }}
      docker-image-name: ${{ vars.DOCKER_IMAGE_NAME }}
      upload-sarif-to-security: false
      run-frank-till-healthy-enabled: false

  run-larva-scenarios:
    uses: ./.github/workflows/run-larva-scenarios.yml
    needs:
      - version-next
      - ci
    with:
      image-id: ${{ needs.ci.outputs.image-id }}

  run-soapui-tests:
    runs-on: ubuntu-latest
    needs:
      - version-next
      - ci
      - run-larva-scenarios
    steps:
      - uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2

      - name: Download Docker tar
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 #4.1.9
        with:
          name: build-docker-image

      - name: Load Docker tar
        shell: bash
        run: |
          docker load --input image.tar
          docker image ls -a

      - name: Run SoapUI Tests
        run: |
          export ZAAKBRUG_VERSION="${{ needs.version-next.outputs.version-next }}"

          docker image inspect ${{ vars.DOCKER_IMAGE_REPOSITORY }}/${{ vars.DOCKER_IMAGE_NAME }}:${ZAAKBRUG_VERSION}
          docker compose -f ./docker-compose.zaakbrug.dev.yml -f ./docker-compose.zaakbrug.postgres.yml -f ./docker-compose.openzaak.dev.yml --profile soapui up -d
          docker ps

          sleep 90

          STATUS=$(docker inspect --format='{{json .State.Status}}' soapui-testrunner)
          until [ "$STATUS" = '"exited"' ]
          do
            STATUS=$(docker inspect --format='{{json .State.Status}}' soapui-testrunner)
            sleep 15
          done

          EXIT_CODE=$(docker inspect --format='{{json .State.ExitCode}}' soapui-testrunner)
          echo "Exit Code: $EXIT_CODE"

          docker compose -f ./docker-compose.zaakbrug.dev.yml -f ./docker-compose.zaakbrug.postgres.yml -f ./docker-compose.openzaak.dev.yml down
          
          if [ "$EXIT_CODE" -ne 0 ]
            then
              echo "Test(s) failed. Failing the job."
              exit 1
          fi
        timeout-minutes: 15

      - name: Check if test reports created
        run: |
          if [ -z "$(ls -A e2e/reports)" ]
            then
              echo "There is no test report found, tests might not have been run. Failing the job."
              exit 1
          fi

      - name: Upload SoapUI testreports as artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 #4.6.1
        if: always()
        with:
          name: reports-soapui-testreports
          path: ./*/reports